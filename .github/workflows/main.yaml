name: Django                                  # workflow name

on:
  push:
    branches:                                 # similar to "only" in GitLab
      - main

jobs:
  build:
    runs-on: ubuntu-20.04   # similar to "image" in GitLab
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: |
          pip3 install --upgrade virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r requirements.txt
          python manage.py check

  sca-frontend:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '10.x'

      - run: npm install

      - run: docker run --rm -v $(pwd):/src -w /src hysnsec/retire --outputformat json --outputpath retirejs-report.json --severity high
        continue-on-error: true

      - uses: actions/upload-artifact@master
        with:
          name: "RetireJS_$env:GITHUB_RUN_ID"
          path: retirejs-report.json
        if: always()

  sca-backend:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/safety check -r requirements.txt --json > oast-results.json
        continue-on-error: true             # allow the build to fail, similar to "allow_failure: true" in GitLab

      - uses: actions/upload-artifact@master
        with:
          name: "Safety_$env:GITHUB_RUN_ID"
          path: oast-results.json
        if: always()                        # what is this for?

  sast:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json
        continue-on-error: true             # allow the build to fail, similar to allow_failure: true

      - uses: actions/upload-artifact@master
        with:
          name: "Bandit_$env:GITHUB_RUN_ID"
          path: bandit-output.json
        if: always()                        # what is this for?

  secrets-scanning:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/trufflehog filesystem /src --json > trufflehog-output.json
        continue-on-error: true             # allow the build to fail, similar to "allow_failure: true" in GitLab

      - uses: actions/upload-artifact@master
        with:
          name: "TruffleHog_$env:GITHUB_RUN_ID"
          path: trufflehog-output.json
        if: always()                        # what is this for?

  test:
    runs-on: ubuntu-20.04
    needs: [build, sca-frontend, sca-backend, sast, secrets-scanning, sast-with-vm]
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: |
          pip3 install --upgrade virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r requirements.txt
          python manage.py test taskManager

  integration:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - run: |
           echo "This is an integration step"
           echo "$env:GITHUB_RUN_ID"
           echo "$GITHUB_RUN_ID"
      - run: exit 1
        continue-on-error: true

  zap_baseline:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - run: |
           docker pull softwaresecurityproject/zap-stable:2.14.0
           docker run --user root --rm -v $(pwd):/zap/wrk:rw -w /zap softwaresecurityproject/zap-stable:2.14.0 zap-baseline.py -t ${{ secrets.PROD_URL }} -J zap-output.json
        continue-on-error: true

      - uses: actions/upload-artifact@master
        with:
          name: "ZAPScan_$env:GITHUB_RUN_ID"
          path: zap-output.json
        if: always()        # what is this for?
       
  ansible-hardening:
    runs-on: willhallonline/ansible
    needs: test
    steps:
      - name: Setup Ansible
        run: |
           mkdir -p ~/.ssh
           echo "${{ secrets.DEPLOYMENT_SERVER_SSH_PRIVKEY }}" | tr -d "\r" > ~/.ssh/id_rsa
           chmod 600 ~/.ssh/id_rsa
           eval "$(ssh-agent -s)"
           ssh-add ~/.ssh/id_rsa
           ssh-keyscan -t rsa ${{ secrets.DEPLOYMENT_SERVER }} >> ~/.ssh/known_hosts
      - name: Run Ansible
        run: |
           echo -e "[prod]\n${{ secrets.DEPLOYMENT_SERVER }}" >> inventory.ini
           ansible-galaxy install dev-sec.os-hardening
           ansible-playbook -i inventory.ini ansible-hardening.yml

  # inspec:
  #   runs-on: ubuntu-20.04
  #   needs: test
  #   steps:
  #     - run: |
  #          mkdir -p ~/.ssh
  #          echo "${{ secrets.DEPLOYMENT_SERVER_SSH_PRIVKEY }}" | tr -d '\r' > ~/.ssh/id_rsa
  #          chmod 600 ~/.ssh/id_rsa
  #          eval "$(ssh-agent -s)"
  #          ssh-add ~/.ssh/id_rsa
  #          ssh-keyscan -t rsa ${{ secrets.DEPLOYMENT_SERVER }} >> ~/.ssh/known_hosts
  #     - run: |
  #          docker run --rm -v ~/.ssh:/root/.ssh -v $(pwd):/share hysnsec/inspec exec https://github.com/dev-sec/linux-baseline.git -t ssh://root@${{ secrets.DEPLOYMENT_SERVER }} -i ~/.ssh/id_rsa --chef-license accept --reporter json:inspec-output.json
  #       continue-on-error: true

  #     - uses: actions/upload-artifact@master
  #       with:
  #         name: Inspec_$CI_COMMIT_TIMESTAMP
  #         path: inspec-output.json
  #       if: always()        # what is this for?

  sast-with-vm:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json
        continue-on-error: true             # allow the build to fail, similar to allow_failure: true

      - uses: actions/upload-artifact@master
        with:
          name: "Bandit_$env:GITHUB_RUN_ID"
          path: bandit-output.json
        if: always()   
        
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: python3 upload-results.py --host ${{ secrets.DOJO_HOST }} --api_key ${{ secrets.DOJO_API_TOKEN }} --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file bandit-output.json --scanner "Bandit Scan"

  prod:
    runs-on: ubuntu-20.04
    needs: [integration, zap_baseline, ansible-hardening]
    steps:
      - run: echo "This is a deploy step."
